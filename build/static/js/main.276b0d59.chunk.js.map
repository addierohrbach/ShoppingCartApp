{"version":3,"sources":["ProductCard.js","App.js","serviceWorker.js","index.js"],"names":["ProductCard","extra","react_default","a","createElement","Container","Button","Group","className","sizes","fluid","primary","addButton","Card","image","this","props","url","header","title","description","price","Component","paddingBottom","marginTop","justifyContent","App","_ref","products","items","Object","keys","map","sku","currencyFormat","src_ProductCard","key","toString","isFreeShipping","centered","itemsPerRow","Boolean","window","location","hostname","match","fetch","then","resp","json","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRA4BeA,mLAvBP,IAAMC,EACFC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAOC,MAAR,CAAcC,UAAWC,EAAOC,OAAO,GACnCR,EAAAC,EAAAC,cAACE,EAAA,EAAD,UACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,UACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,UACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,YAEJJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQK,SAAS,EAAMH,UAAWI,EAAWF,OAAO,GAApD,gBAIR,OACIR,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACIC,MAAOC,KAAKC,MAAMC,IAClBC,OAAQH,KAAKC,MAAMG,MACnBC,YAAaL,KAAKC,MAAMK,MACxBpB,MAAOA,WAnBGqB,aA2BpBb,EAAQ,CACVc,cAAe,IAGbX,EAAY,CACdY,UAAW,GACXC,eAAgB,UCNLC,EA1BH,SAAAC,GAAgB,IAAdC,EAAcD,EAAdC,SAGJC,EAFOC,OAAOC,KAAKH,GAENI,IAAI,SAAAC,GACnB,IAAIZ,EAAQO,EAASK,GAAKC,eAAiBN,EAASK,GAAKZ,MAEzD,OACInB,EAAAC,EAAAC,cAAC+B,EAAD,CACIC,IAAKH,EAAII,WACTpB,IAAK,mBAAqBgB,EAAII,WAAa,SAC3ClB,MAAOS,EAASK,GAAKd,MACrBE,MAAOA,EACPiB,eAAe,8BAK3B,OACIpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWK,OAAO,GACdR,EAAAC,EAAAC,cAACS,EAAA,EAAKN,MAAN,CAAYgC,UAAQ,EAACC,YAAa,GAC7BX,KCZGY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,MAAM,wBACLC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAApB,GAAgB,IAAdC,EAAcD,EAAdC,SACLsB,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,CAAKxB,SAAUA,IAAcyB,SAASC,eAAe,WDuHlE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMV,KAAK,SAAAW,GACjCA,EAAaC","file":"static/js/main.276b0d59.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Button, Container } from 'semantic-ui-react';\n\nclass ProductCard extends Component {\n    render() {\n        const extra = (\n            <Container>\n                <Button.Group className={sizes} fluid={true}>\n                    <Button>S</Button>\n                    <Button>M</Button>\n                    <Button>L</Button>\n                    <Button>XL</Button>\n                </Button.Group>\n                <Button primary={true} className={addButton} fluid={true}>Add to Cart</Button>\n            </Container>\n        );\n\n        return (\n            <Card\n                image={this.props.url}\n                header={this.props.title}\n                description={this.props.price}\n                extra={extra}\n            />\n        )\n    }\n}\n\nexport default ProductCard;\n\nconst sizes = {\n    paddingBottom: 20,\n};\n\nconst addButton = {\n    marginTop: 20,\n    justifyContent: 'center',\n};","import React from 'react';\nimport {Card, Container} from 'semantic-ui-react';\nimport ProductCard from './ProductCard';\n\nconst App = ({products}) => {\n    const skus = Object.keys(products);\n\n    const items = skus.map(sku => {\n        let price = products[sku].currencyFormat + products[sku].price;\n\n        return (\n            <ProductCard\n                key={sku.toString()}\n                url={\"./data/products/\" + sku.toString() + \"_1.jpg\"}\n                title={products[sku].title}\n                price={price}\n                isFreeShipping=\"Free Shipping Available\"\n            />\n        )\n    })\n\n    return (\n        <Container fluid={false} >\n            <Card.Group centered itemsPerRow={4}>\n                {items}\n            </Card.Group>\n        </Container>\n    )\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfetch('./data/products.json')\n.then(resp => resp.json())\n.then(({products}) => {\n   ReactDOM.render(<App products={products} />, document.getElementById('root'));\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}